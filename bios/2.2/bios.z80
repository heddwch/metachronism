;	Z80 CBIOS for Metachronism
;
;	Copyright (C) 2016 Quinn Evans
;	Based on the CBIOS from Udo Munk's z80pack
;	Copyright (C) 1988-2007 by Udo Munk
;
	MACLIB	STDDEF.INC
	MACLIB	CONFIG.INC
	MACLIB	CON.INC
	IMPORT	CONIO
	IMPORT	DISK
	TAIL	BIOSTAIL
	EXT	ALV0,ALV1,ALV2,ALV3
	COM	FA00

MSIZE	EQU	64		;cp/m version memory size in kilobytes
;
;	"bias" is address offset from 3400H for memory systems
;	than 16K (referred to as "b" throughout the text).
;
BIAS	EQU	(MSIZE-20)*1024
CCP	EQU	3400H+BIAS	;base of ccp
BDOS	EQU	CCP+806H	;base of bdos
BIOS	EQU	CCP+1600H	;base of bios
NSECTS	EQU	(BIOS-CCP)/128	;warm start sector count
CDISK	EQU	0004H		;current disk number 0=A,...,15=P
IOBYTE	EQU	0003H		;intel i/o byte
;
;	jump vector for individual subroutines
;
	JP	BOOT		;cold start
WBOOTE: JP	WBOOT		;warm start
	JP	CONST		;console status
	JP	GETCHAR		;console character in (CONIN)
	JP	PUTCHAR		;console character out (CONOUT)
	JP	LIST		;list character out
	JP	PUNCH		;punch character out
	JP	READER		;reader character in
	JP	HOME		;move head to home position
	JP	SELDSK		;select disk
	JP	_SETTRK		;set track number
	JP	_SETSEC		;set sector number
	JP	_SETDMA		;set dma address
	JP	_READ		;read disk
	JP	_WRITE		;write disk
	JP	LISTST		;return list status
	JP	SECTRAN		;sector translate

DPH0:		DPH		DPB0, ALV0
DPH1:		DPH		DPB1, ALV1
DPH2:		DPH		DPB2, ALV2
DPH3:		DPH		DPB3, ALV3

;
;	messages
;
SIGNON: DEFM	'64K CP/M Vers. 2.2'
	DEFB	13,10,0
;
LDERR:	DEFM	'BIOS: error booting'
	DEFB	13,10,0

;
;	end of fixed tables
;
;	utility functions
;
;	print a 0 terminated string to console device
;	pointer to string in HL
;
PRTMSG:	LD	A,(HL)
	OR	A
	RET	Z
	LD	C,A
	CALL	PUTCHAR
	INC	HL
	JP	PRTMSG
;
;	individual subroutines to perform each function
;	simplest case is to just perform parameter initialization
;
BOOT:   LD	SP,80H		;use space below buffer for stack
	LD	HL,SIGNON	;print message
	CALL	PRTMSG
	XOR	A		;zero in the accum
	LD	(IOBYTE),A	;clear the iobyte
	LD	(CDISK),A	;select disk zero
;	JP	GOCPM		;initialize and go to cp/m
;
;	simplest case is to read the disk until all sectors loaded
;
WBOOT:  LD	SP,80H		;use space below buffer for stack
	LD	C,0		;select disk 0
	CALL	SELDSK
	LD	A,(CURDPB)	;low byte of SPT
	LD	(SPT),A
	CALL	HOME		;go to track 00
;
	LD	B,NSECTS	;b counts # of sectors to load
	LD	C,0		;c has the current track number
	LD	DE,1		;DE has the next sector to read
	LD	HL,CCP		;base of cp/m (initial load point)
LOAD1:				;load one more sector
	PUSH	BC		;save sector count, current track
	PUSH	DE		;save next sector to read
	PUSH	HL		;save dma address
	PUSH	DE
	POP	BC		;get sector address to register BC
	CALL	_SETSEC		;set sector address from register BC
	POP	BC		;recall dma address to b,c
	PUSH	BC		;replace on stack for later recall
	CALL	_SETDMA		;set dma address from b,c
;	drive set to 0, track set, sector set, dma address set
	CALL	_READ
	OR	A		;any errors?
	JP	Z,LOAD2		;no, continue
	LD	HL,LDERR	;error, print message
	CALL	PRTMSG
	DI			;and halt the machine
	HALT
;	no error, move to next sector
LOAD2:	POP	HL		;recall dma address
	LD	DE,128		;dma=dma+128
	ADD	HL,DE		;new dma address is in h,l
	POP	DE		;recall sector address
	POP	BC		;recall number of sectors remaining,
				;and current trk
	DEC	B		;sectors=sectors-1
	JP	Z,GOCPM		;transfer to cp/m if all have been loaded
;	more sectors remain to load, check for track change
	INC	E
	LD	A,(SPT)		;sector=SPT?, if so, change tracks
	CP	E
	JP	NZ,LOAD1	;NZ if sector<SPT
;	end of current track, go to next track
	INC     C
	LD	A, C
	CP	2
	JP	Z, GOCPM	;if track=track+1 == reserved tracks, then done
	LD	D,1		;begin with first sector of next track
;	save register state, and change tracks
	PUSH 	BC
	LD	B,0
	CALL	_SETTRK		;track address set from register c
	POP	BC
	JP	LOAD1		;for another sector
;	end of load operation, set parameters and go to cp/m
GOCPM:
	LD	A,0C3H		;c3 is a jmp instruction
	LD	(0),A		;for jmp to wboot
	LD	HL,WBOOTE	;wboot entry point
	LD	(1),HL		;set address field for jmp at 0
;
	LD	(5),A		;for jmp to bdos
	LD	HL,BDOS		;bdos entry point
	LD	(6),HL		;address field of jump at 5 to bdos
;
	LD	BC,80H		;default dma address is 80h
	CALL	_SETDMA
;
	LD	A,(CDISK)	;get current disk number
	LD	C,A		;send to the ccp
	JP	CCP		;go to cp/m for further processing
;
;
;	simple i/o handlers
;
;	console status, return 0ffh if character ready, 00h if not
;
CONST:
	IN	A,(CONCTRL)	;get console status
	AND	CONRDYR
	JP	NZ, CONST_RDY
	LD	A, 0
	RET
CONST_RDY:
	LD	A, 0FFH
	RET
;
;	console character into register a
;	GETCHAR conforms to the interface, so we use it directly
;CONIN:
;
;
;	console character output from register c
;
;	PUTCHAR conforms to the interface, so we use it directly
;CONOUT:
;
;	list character from register c
;
LIST:
	RET
;
;	return list status (00h if not ready, 0ffh if ready)
;
LISTST:
	RET
;
;	punch character from register c
;
PUNCH:
	RET
;
;	read character into register a from reader device
;
READER:
	RET
;
;
;	i/o drivers for the disk follow
;
;	move to the track 00 position of current drive
;	translate this call into a settrk call with parameter 00
;
HOME:		LD	BC,0		;select track 0
		JP	_SETTRK		;we will move to 00 on first read/write
;
;	select disk given by register C
;
SELDSK:		LD	A, C
		SUB	4
		JP	P, DSK_ERR0
		PUSH	BC		;save drive number
		CALL	_SELDSK
		OR	A
		JP	NZ, DSK_ERR1
		LD	HL, DPB0
		LD	DE, 17
		LD	A,C
		OR	A
		JP	Z,ISDPB0
DPBOFF:		ADD	HL, DE
		DEC	C
		JP	NZ, DPBOFF
ISDPB0:		PUSH	HL
		CALL	GETDPB
		OR	A
		JP	NZ, DSK_ERR2
		POP	HL
		LD	(CURDPB),HL	;save DPB
		LD	HL,DPH0
		POP	BC
		LD	A,C
		OR	A
		JP	Z,ISDPH0
		LD	DE,16
DPHOFF:		ADD	HL,DE
		DEC	C
		JP	NZ,DPHOFF
ISDPH0:		RET

DSK_ERR0:	LD	A, 0
		JP	DSK_ERR
DSK_ERR1:	LD	A, 1
		JP	DSK_ERR
DSK_ERR2:	LD	A, 2
DSK_ERR:
		OUT	(DEBUG),A
		LD	HL, 0
		RET
;
;	set track given by register c
;
;SETTRK:
;		RET
;
;	set sector given by register c
;
;SETSEC:
;		RET
;
;	translate the sector given by BC using the
;	translate table given by DE
;
SECTRAN:
		EX	DE,HL
		RET			;with value in HL
;
;	set dma address given by registers b and c
;
;SETDMA:
;		RET
;
;	perform read operation
;
;READ:
;		RET
;
;	perform a write operation
;
;WRITE:
;		RET

DPB0:		DEFS	17,0
DPB1:		DEFS	17,0
DPB2:		DEFS	17,0
DPB3:		DEFS	17,0
CURDPB:		DEFW	0000H
SPT:		DEFB	00H
DIRBF:		DEFS	128		;scratch directory area
